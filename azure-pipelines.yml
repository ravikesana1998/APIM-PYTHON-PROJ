trigger:
  - main

variables:
  dockerRegistryServiceConnection: '99c0a625-5f02-4515-b601-ee6f0455d046'
  containerRegistry: 'pythonrreg.azurecr.io'
  imageRepository: 'pythonrreg'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):$(tag)'
  imageNameLatest: '$(containerRegistry)/$(imageRepository):latest'
  swaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  apimName: 'dotnetapi9'
  apimResourceGroup: 'rg-23-6'
  apimApiName: 'dotnetapi9'
  subscriptionId: '85b61d1d-92dd-4311-90eb-4f3e1263adca'
  appServiceName: 'pythonapps' # Update this to match your App Service name

pool:
  name: 'self-hosted-pool'

stages:
  - stage: Build
    jobs:
      - job: BuildImage
        steps:
          - script: |
              docker build -t $(imageName) -t $(imageNameLatest) -f Dockerfile .
            displayName: 'Build Docker Image'

  - stage: Push
    jobs:
      - job: PushImage
        steps:
          - task: Docker@2
            inputs:
              command: login
              containerRegistry: $(dockerRegistryServiceConnection)

          - script: |
              docker push $(imageName)
              docker push $(imageNameLatest)
            displayName: 'Push Docker Images'

  - stage: ImportToAPIM
    dependsOn: Push
    jobs:
      - job: SyncAPIM
        steps:
          - task: AzureCLI@2
            displayName: 'Restart AppService + Sync Swagger to APIM'
            inputs:
              azureSubscription: 'DevopsServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "♻️ Restarting App Service to ensure latest Swagger is live..."
                az webapp restart --name $(appServiceName) --resource-group $(apimResourceGroup)
                echo "✅ Restarted App Service"

                echo "📥 Downloading Swagger..."
                curl -sSL "$(swaggerUrl)" -o swagger.json

                echo "🔨 Splitting Swagger..."
                python3 split_swagger_by_method.py

                echo "🛡️ Ensuring base API exists in APIM..."
                az apim api show \
                  --resource-group $(apimResourceGroup) \
                  --service-name $(apimName) \
                  --api-id $(apimApiName) > /dev/null 2>&1 || \
                az apim api create \
                  --resource-group $(apimResourceGroup) \
                  --service-name $(apimName) \
                  --api-id $(apimApiName) \
                  --display-name $(apimApiName) \
                  --path $(apimApiName) \
                  --protocols https \
                  --subscription-required false

                echo "🧹 Cleaning up stale APIM operations..."
                export APIM_API_NAME=$(apimApiName)
                export APIM_RESOURCE_GROUP=$(apimResourceGroup)
                export APIM_SERVICE_NAME=$(apimName)
                export APIM_SUBSCRIPTION_ID=$(subscriptionId)
                export APIM_SWAGGER_URL=$(swaggerUrl)

                python3 validate_apim_vs_swagger.py
                python3 cleanup_removed_operations.py

                echo "📦 Syncing Swagger operations to APIM..."
                python3 sync_apim_operations.py
