trigger:
  - main

variables:
  dockerRegistryServiceConnection: '99c0a625-5f02-4515-b601-ee6f0455d046'
  imageRepository: 'pythonrreg'
  containerRegistry: 'pythonrreg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imageNameWithTag: '$(containerRegistry)/$(imageRepository):$(tag)'
  imageNameLatest: '$(containerRegistry)/$(imageRepository):latest'
  swaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  apimName: 'python-api'
  apimResourceGroup: 'rg-23-6'
  apimApiName: 'python-api'
  subscriptionId: '85b61d1d-92dd-4311-90eb-4f3e1263adca'

pool:
  name: 'self-hosted-pool'

stages:
# ---------------------- BUILD ----------------------
- stage: Build
  displayName: 'Docker Build'
  jobs:
    - job: BuildImage
      displayName: 'Build Docker Image'
      steps:
        - script: |
            echo "##[group]Building Docker image"
            echo "Image: $(imageNameWithTag)"
            docker build -t $(imageNameWithTag) -t $(imageNameLatest) -f $(dockerfilePath) .
            echo "##[endgroup]"
          displayName: 'Docker Build'

# ---------------------- PUSH -----------------------
- stage: Push
  displayName: 'Push Docker Image to ACR'
  dependsOn: Build
  jobs:
    - job: PushImage
      displayName: 'Push to ACR'
      steps:
        - task: Docker@2
          displayName: 'Login to Azure Container Registry'
          inputs:
            command: login
            containerRegistry: $(dockerRegistryServiceConnection)

        - script: |
            echo "##[group]Pushing Docker Images"
            docker push $(imageNameWithTag)
            docker push $(imageNameLatest)
            echo "##[endgroup]"
          displayName: 'Push Docker Image'

# -------------------- APIM IMPORT ------------------
- stage: ImportOpenAPI
  displayName: 'Import API to APIM'
  dependsOn: Push
  jobs:
    - job: ImportAPI
      displayName: 'Process and Import Swagger'
      steps:
        - script: |
            echo "Checking Python installation..."
            python3 --version
            pip3 --version
          displayName: 'Verify Python Installation'

        - task: AzureCLI@2
          displayName: '‚òÅÔ∏è Import to APIM'
          inputs:
            azureSubscription: '69bd33e0-0d1f-4f52-86c7-d4589813ac29'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              echo "üîΩ Downloading Swagger JSON..."
              curl -sSL "$(swaggerUrl)" -o swagger.json

              echo "üìÅ Creating split/ directory..."
              mkdir -p split

              echo "‚úÇÔ∏è Splitting Swagger by HTTP method..."
              python3 -c "
              import json
              import os
              from pathlib import Path

              def sanitize_name(method, path):
                  return f'{method.upper()}_{path.strip(\"/\").replace(\"/\", \"_\").replace(\"{\",\"\").replace(\"}\",\"\")}'

              try:
                  with open('swagger.json') as f:
                      swagger = json.load(f)

                  for path, methods in swagger.get('paths', {}).items():
                      for method, details in methods.items():
                          new_spec = {
                              'openapi': swagger.get('openapi', '3.0.0'),
                              'info': swagger.get('info', {}),
                              'servers': swagger.get('servers', []),
                              'paths': {path: {method: details}},
                              'components': swagger.get('components', {})
                          }
                          filename = sanitize_name(method, path) + '.json'
                          out_path = Path('split') / filename
                          with open(out_path, 'w') as out_file:
                              json.dump(new_spec, out_file, indent=2)
                          print(f'‚úî Created: {out_path}')
              except Exception as e:
                  print(f'‚ùå Error: {e}')
                  exit(1)
              "

              echo "‚òÅÔ∏è Importing APIs into Azure API Management..."
              for file in split/*.json; do
                api_name=$(basename "$file" .json)
                echo "üì§ Importing: $api_name"

                az apim api import \
                  --resource-group "$(apimResourceGroup)" \
                  --service-name "$(apimName)" \
                  --api-id "$(apimApiName)" \
                  --path "$(apimApiName)" \
                  --specification-format OpenApiJson \
                  --specification-path "$file" \
                  --subscription-id "$(subscriptionId)" \
                  --api-revision 1 \
                  --display-name "$api_name" || {
                    echo "##[error]‚ùå Failed to import $api_name"
                    exit 1
                  }
              done

              echo "‚úîÔ∏è All APIs imported successfully"