trigger:
  - main

variables:
  dockerRegistryServiceConnection: '99c0a625-5f02-4515-b601-ee6f0455d046'
  imageRepository: 'pythonrreg'
  containerRegistry: 'pythonrreg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imageNameWithTag: '$(containerRegistry)/$(imageRepository):$(tag)'
  imageNameLatest: '$(containerRegistry)/$(imageRepository):latest'
  swaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  apimName: 'dotnetapi9'
  apimResourceGroup: 'rg-23-6'
  apimApiName: 'dotnetapi9'
  subscriptionId: '85b61d1d-92dd-4311-90eb-4f3e1263adca'
  appServiceName: 'pythonapps-e0hmd6eucuf9acg5'
  appServiceResourceGroup: 'appsvc-rg'

pool:
  name: 'self-hosted-pool'

stages:

# ----------- BUILD + PUSH ----------- #
- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: BuildAndPushImage
      steps:
        - task: Docker@2
          displayName: 'Login to ACR'
          inputs:
            command: login
            containerRegistry: $(dockerRegistryServiceConnection)

        - script: |
            docker build -t $(imageNameWithTag) -t $(imageNameLatest) -f $(dockerfilePath) .
            docker push $(imageNameWithTag)
            docker push $(imageNameLatest)
          displayName: 'Build and Push Docker Image'

# ----------- SYNC TO APIM ----------- #
- stage: ImportToAPIM
  displayName: 'Sync Swagger to APIM'
  dependsOn: BuildAndPush
  jobs:
    - job: SyncAPIM
      displayName: 'Download Swagger + Sync to APIM'
      steps:
        - task: AzureCLI@2
          displayName: 'Download Swagger'
          inputs:
            azureSubscription: 'DevopsServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              cd $(Build.SourcesDirectory)
              echo "📥 Downloading Swagger..."
              curl -sSL "$(swaggerUrl)" -o swagger.json

        - task: Bash@3
          displayName: 'Add operationId fields to Swagger'
          inputs:
            targetType: 'inline'
            script: |
              cd $(Build.SourcesDirectory)
              python3 add_operation_ids.py swagger.json

        - task: Bash@3
          displayName: 'Split Swagger into operations'
          inputs:
            targetType: 'inline'
            script: |
              cd $(Build.SourcesDirectory)
              export AZURE_SUBSCRIPTION_ID=$(az account show --query id -o tsv)
              export AZURE_RESOURCE_GROUP=$(apimResourceGroup)
              export AZURE_APIM_NAME=$(apimName)
              export AZURE_APIM_API_ID=$(apimApiName)
              mkdir -p split
              python3 split_swagger_by_method.py

        - task: AzureCLI@2
          displayName: 'Validate and Sync Swagger to APIM'
          inputs:
            azureSubscription: 'DevopsServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              cd $(Build.SourcesDirectory)

              echo "🛡️ Checking if API exists in APIM..."
              az apim api show \
                --resource-group $(apimResourceGroup) \
                --service-name $(apimName) \
                --api-id $(apimApiName) > /dev/null 2>&1

              if [ $? -ne 0 ]; then
                echo "🔧 Creating new API: $(apimApiName)..."
                az apim api create \
                  --resource-group $(apimResourceGroup) \
                  --service-name $(apimName) \
                  --api-id $(apimApiName) \
                  --display-name $(apimApiName) \
                  --path $(apimApiName) \
                  --protocols https \
                  --subscription-required false
              else
                echo "✅ API $(apimApiName) already exists."
              fi

              echo "📦 Exporting environment variables..."
              export AZURE_SUBSCRIPTION_ID="$(subscriptionId)"
              export APIM_NAME="$(apimName)"
              export APIM_RESOURCE_GROUP="$(apimResourceGroup)"
              export APIM_API_NAME="$(apimApiName)"
              export APIM_SWAGGER_URL="$(swaggerUrl)"

              echo "🧹 Cleaning up old operations..."
              python3 validate_apim_vs_swagger.py
              python3 cleanup_removed_operations.py

              echo "🚀 Syncing new Swagger operations to APIM..."
              python3 sync_apim_operations.py

              echo "📢 Publishing API revision..."
              az apim api update \
                --resource-group $(apimResourceGroup) \
                --service-name $(apimName) \
                --api-id $(apimApiName) \
                --set isCurrent=true
