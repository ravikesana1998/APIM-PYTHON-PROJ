trigger:
  branches:
    include:
      - main

pool:
  name: 'self-hosted-pool'

variables:
  targetSwaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  SWAGGER_FILE: 'swagger/processed_swagger.json'
  SPLIT_DIR: 'swagger/split'
  PYTHON_PATH: '/usr/bin/python3'

  AZURE_SUBSCRIPTION_ID: '85b61d1d-92dd-4311-90eb-4f3e1263adca'
  AZURE_RESOURCE_GROUP: 'rg-23-6'
  AZURE_APIM_NAME: 'dotnetapi9'
  AZURE_APIM_API_ID: 'dotnetapi9'

stages:

# ---------------------------------- #
# Stage 1: Fetch & Preprocess Swagger
# ---------------------------------- #
- stage: FetchAndPreprocessSwagger
  displayName: üì• Fetch & Preprocess Swagger
  jobs:
    - job: FetchSwagger
      steps:
        - script: |
            mkdir -p swagger
            echo "Downloading Swagger from $targetSwaggerUrl"
            $PYTHON_PATH fetch_and_preprocess_swagger.py
          env:
            SWAGGER_URL: $(targetSwaggerUrl)
          displayName: üìÅ Download & Preprocess Swagger

# ---------------------------------- #
# Stage 2: Split Swagger & Prepare
# ---------------------------------- #
- stage: SplitSwagger
  displayName: ‚úÇÔ∏è Split Swagger Per Operation
  dependsOn: FetchAndPreprocessSwagger
  jobs:
    - job: Split
      steps:
        - script: |
            rm -rf "$(SPLIT_DIR)"
            mkdir -p "$(SPLIT_DIR)"
            $PYTHON_PATH split_swagger_by_operation.py
          displayName: ‚úÇÔ∏è Split Swagger JSON

# ---------------------------------- #
# Stage 3: APIM Validation & Sync
# ---------------------------------- #
- stage: SyncToAPIM
  displayName: üöÄ Sync with Azure API Management
  dependsOn: SplitSwagger
  jobs:
    - job: Sync
      steps:
        # Optional API import fallback
        - script: |
            echo "Checking if API exists in APIM..."
            if ! az apim api show \
              --resource-group "$(AZURE_RESOURCE_GROUP)" \
              --service-name "$(AZURE_APIM_NAME)" \
              --api-id "$(AZURE_APIM_API_ID)" &>/dev/null; then

              echo "Creating API in APIM from Swagger..."
              az apim api import \
                --resource-group "$(AZURE_RESOURCE_GROUP)" \
                --service-name "$(AZURE_APIM_NAME)" \
                --api-id "$(AZURE_APIM_API_ID)" \
                --path "$(AZURE_APIM_API_ID)" \
                --display-name "$(AZURE_APIM_API_ID)" \
                --specification-format OpenApi \
                --specification-path "$(SWAGGER_FILE)" || {
                  echo "‚ùå API import failed"; exit 1;
                }
            else
              echo "‚úÖ API already exists."
            fi
          displayName: üß™ Ensure API Exists in APIM

        # Validate APIM vs Swagger
        - script: |
            $PYTHON_PATH validate_apim_vs_swagger.py
          env:
            AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
            AZURE_RESOURCE_GROUP: $(AZURE_RESOURCE_GROUP)
            APIM_SERVICE_NAME: $(AZURE_APIM_NAME)
            API_ID: $(AZURE_APIM_API_ID)
          displayName: üîç Validate APIM vs Swagger

        # Optionally: clean up stale ops
        - script: |
            echo "üîß Skipping cleanup for now (or implement cleanup_removed_operations.py)"
          displayName: üßπ [Optional] Clean Removed Operations

        # Sync updated operations
        - script: |
            $PYTHON_PATH sync_operations_to_apim.py
          env:
            AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
            AZURE_RESOURCE_GROUP: $(AZURE_RESOURCE_GROUP)
            APIM_SERVICE_NAME: $(AZURE_APIM_NAME)
            API_ID: $(AZURE_APIM_API_ID)
          displayName: üöÄ Sync Updated/New Operations to APIM

        # Publish latest revision
        - script: |
            az apim api update \
              --resource-group "$(AZURE_RESOURCE_GROUP)" \
              --service-name "$(AZURE_APIM_NAME)" \
              --api-id "$(AZURE_APIM_API_ID)" \
              --set isCurrent=true
          displayName: üì¢ Publish Latest API Revision
