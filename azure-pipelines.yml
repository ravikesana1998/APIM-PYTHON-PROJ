trigger:
- main

variables:
  dockerRegistryServiceConnection: 'your-acr-connection-id'
  containerRegistry: 'pythonrreg.azurecr.io'
  imageRepository: 'pythonrreg'
  tag: '$(Build.BuildId)'
  imageName: '$(containerRegistry)/$(imageRepository):$(tag)'
  imageNameLatest: '$(containerRegistry)/$(imageRepository):latest'
  swaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  apimName: 'dotnetapi9'
  apimResourceGroup: 'rg-23-6'
  apimApiName: 'dotnetapi9'
  subscriptionId: '85b61d1d-92dd-4311-90eb-4f3e1263adca'

pool:
  name: 'self-hosted-pool'

stages:
- stage: BuildAndPushImage
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: DockerBuildPush
      displayName: 'Build and Push'
      steps:
        - script: |
            docker build -t $(imageName) -t $(imageNameLatest) -f Dockerfile .
            docker login $(containerRegistry) --username <USERNAME> --password <PASSWORD>
            docker push $(imageName)
            docker push $(imageNameLatest)
          displayName: 'Docker Build and Push'

- stage: ImportToAPIM
  displayName: 'Sync Swagger to APIM'
  dependsOn: BuildAndPushImage
  jobs:
    - job: ImportSwagger
      displayName: 'Import Swagger to APIM'
      steps:
        - script: |
            cd $(Build.SourcesDirectory)

            echo "📥 Downloading latest Swagger spec..."
            curl -sSL "$(swaggerUrl)" -o swagger.json

            echo "🔨 Splitting Swagger into individual operations..."
            python3 split_swagger_by_method.py

            echo "🛡️ Ensuring base API exists in APIM..."
            az apim api show --resource-group $(apimResourceGroup) --service-name $(apimName) --api-id $(apimApiName) > /dev/null 2>&1
            if [ $? -ne 0 ]; then
              echo "🔧 Creating base API in APIM..."
              az apim api create \
                --resource-group $(apimResourceGroup) \
                --service-name $(apimName) \
                --api-id $(apimApiName) \
                --display-name $(apimApiName) \
                --path $(apimApiName) \
                --protocols https \
                --subscription-required false
            else
              echo "✅ API $(apimApiName) already exists."
            fi

            echo "🧹 Comparing and cleaning up removed operations..."
            export APIM_SUBSCRIPTION_ID=$(subscriptionId)
            export APIM_RESOURCE_GROUP=$(apimResourceGroup)
            export APIM_SERVICE_NAME=$(apimName)
            export APIM_API_NAME=$(apimApiName)
            export SWAGGER_URL=$(swaggerUrl)

            python3 validate_apim_vs_swagger.py
            python3 cleanup_removed_operations.py

            echo "📦 Syncing new and updated operations to APIM..."
            python3 sync_apim_operations.py
          displayName: 'Run Swagger Sync Pipeline'
          env:
            AZURE_SUBSCRIPTION_ID: $(subscriptionId)
