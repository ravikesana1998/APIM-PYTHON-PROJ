trigger:
  - main

variables:
  dockerRegistryServiceConnection: '99c0a625-5f02-4515-b601-ee6f0455d046'
  imageRepository: 'pythonrreg'
  containerRegistry: 'pythonrreg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imageNameWithTag: '$(containerRegistry)/$(imageRepository):$(tag)'
  imageNameLatest: '$(containerRegistry)/$(imageRepository):latest'
  swaggerUrl: 'https://pythonapps-e0hmd6eucuf9acg5.canadacentral-01.azurewebsites.net/swagger/v1/swagger.json'
  apimName: 'dotnetapi9'
  apimResourceGroup: 'rg-23-6'
  apimApiName: 'dotnetapi9'
  subscriptionId: '85b61d1d-92dd-4311-90eb-4f3e1263adca'

pool:
  name: 'self-hosted-pool'

stages:

- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: BuildAndPushImage
      displayName: 'Build and Push Docker Image'
      steps:
        - task: Docker@2
          displayName: 'Login to ACR'
          inputs:
            command: login
            containerRegistry: $(dockerRegistryServiceConnection)

        - script: |
            docker build -t $(imageNameWithTag) -t $(imageNameLatest) -f $(dockerfilePath) .
            docker push $(imageNameWithTag)
            docker push $(imageNameLatest)
          displayName: 'Build and Push Docker Image'

- stage: ImportToAPIM
  displayName: 'Process Swagger and Prepare for Sync'
  dependsOn: BuildAndPush
  jobs:
    - job: ProcessSwagger
      displayName: 'Download + Process Swagger'
      steps:
        - task: AzureCLI@2
          displayName: 'Download Swagger from App Service'
          inputs:
            azureSubscription: 'DevopsServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              cd $(Build.SourcesDirectory)
              echo "üì• Downloading Swagger..."
              curl -sSL "$(swaggerUrl)" -o swagger.json

        - task: Bash@3
          displayName: 'Auto-generate operationId for missing ops'
          inputs:
            targetType: 'inline'
            script: |
              cd $(Build.SourcesDirectory)
              python3 add_operation_ids.py swagger.json

        - task: AzureCLI@2
          displayName: 'Split Swagger into individual operations'
          inputs:
            azureSubscription: 'DevopsServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              set -euo pipefail
              cd $(Build.SourcesDirectory)

              echo "üì¶ Exporting environment variables..."
              export AZURE_SUBSCRIPTION_ID='$(subscriptionId)'
              export AZURE_RESOURCE_GROUP='$(apimResourceGroup)'
              export AZURE_APIM_NAME='$(apimName)'
              export AZURE_APIM_API_ID='$(apimApiName)'

              echo "‚úÇÔ∏è Splitting Swagger..."
              mkdir -p split
              python3 split_swagger_by_method.py swagger.json split/ || { echo '‚ùå Swagger split failed'; exit 1; }

        - task: PublishPipelineArtifact@1
          displayName: 'Upload Swagger split files'
          inputs:
            targetPath: '$(Build.SourcesDirectory)/split'
            artifact: 'swagger-split'
            publishLocation: 'pipeline'

        - task: PublishPipelineArtifact@1
          displayName: 'Upload original Swagger JSON'
          inputs:
            targetPath: '$(Build.SourcesDirectory)/swagger.json'
            artifact: 'swagger-json'
            publishLocation: 'pipeline'

- stage: SyncToAPIM
  displayName: 'Validate + Sync Swagger to APIM'
  dependsOn: ImportToAPIM
  jobs:
    - job: SyncOperations
      displayName: 'Sync Swagger operations to Azure API Management'
      steps:
        - task: DownloadPipelineArtifact@2
          displayName: 'Download Swagger split files'
          inputs:
            artifact: 'swagger-split'
            path: '$(Build.SourcesDirectory)/split'

        - task: DownloadPipelineArtifact@2
          displayName: 'Download Swagger JSON'
          inputs:
            artifact: 'swagger-json'
            path: '$(Build.SourcesDirectory)'

        - task: AzureCLI@2
          displayName: 'Validate + Cleanup + Sync + Publish'
          inputs:
            azureSubscription: 'DevopsServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              set -euo pipefail
              cd $(Build.SourcesDirectory)

              echo "üì¶ Exporting environment variables..."
              export AZURE_SUBSCRIPTION_ID='$(subscriptionId)'
              export AZURE_RESOURCE_GROUP='$(apimResourceGroup)'
              export AZURE_APIM_NAME='$(apimName)'
              export AZURE_APIM_API_ID='$(apimApiName)'
              export APIM_RESOURCE_GROUP='$(apimResourceGroup)'
              export APIM_NAME='$(apimName)'
              export APIM_API_NAME='$(apimApiName)'
              export APIM_SWAGGER_URL='$(swaggerUrl)'

              echo "üß™ Checking if API exists in APIM..."
              if ! az apim api show \
                --resource-group "$APIM_RESOURCE_GROUP" \
                --service-name "$APIM_NAME" \
                --api-id "$APIM_API_NAME" &>/dev/null; then

                echo "‚ûï API not found. Creating it from Swagger..."
                az apim api import \
                  --resource-group "$APIM_RESOURCE_GROUP" \
                  --service-name "$APIM_NAME" \
                  --api-id "$APIM_API_NAME" \
                  --path "$APIM_API_NAME" \
                  --display-name "$APIM_API_NAME" \
                  --specification-format OpenApi \
                  --specification-path swagger.json || {
                    echo '‚ùå API import failed'; exit 1;
                  }
              else
                echo "‚úÖ API already exists in APIM."
              fi

              echo "üõ°Ô∏è Validating APIM vs Swagger..."
              python3 validate_apim_vs_swagger.py || { echo '‚ùå Validation failed'; exit 1; }

              echo "üßπ Cleaning removed operations..."
              python3 cleanup_removed_operations.py || { echo '‚ùå Cleanup failed'; exit 1; }

              echo "üöÄ Syncing new/updated operations to APIM..."
              python3 sync_apim_operations.py || { echo '‚ùå Sync failed'; exit 1; }

              echo "üì¢ Publishing latest API revision..."
              az apim api update \
                --resource-group "$APIM_RESOURCE_GROUP" \
                --service-name "$APIM_NAME" \
                --api-id "$APIM_API_NAME" \
                --set isCurrent=true || { echo '‚ùå Publish failed'; exit 1; }
