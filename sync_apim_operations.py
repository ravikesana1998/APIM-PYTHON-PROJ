# sync_apim_operations.py

import os
import json
import subprocess

SPLIT_DIR = "split"
RESOURCE_GROUP = os.environ["APIM_RESOURCE_GROUP"]
SERVICE_NAME = os.environ["APIM_SERVICE_NAME"]
API_ID = os.environ["APIM_API_NAME"]

def sync_operation(file):
    with open(os.path.join(SPLIT_DIR, file), 'r') as f:
        data = json.load(f)

    path = list(data["paths"].keys())[0]
    method = next(iter(data["paths"][path])).upper()
    op_id = file.replace(".json", "")
    display_name = op_id

    print(f"üì§ Syncing operation: {op_id} ({method} {path})")

    # Prepare basic args
    base_args = [
        "az", "apim", "api", "operation", "show",
        "--resource-group", RESOURCE_GROUP,
        "--service-name", SERVICE_NAME,
        "--api-id", API_ID,
        "--operation-id", op_id
    ]

    try:
        subprocess.run(base_args, check=True, capture_output=True)
        print(f"üîÅ Updating existing operation: {op_id}")
        action = "update"
    except subprocess.CalledProcessError:
        print(f"‚ûï Creating new operation: {op_id}")
        action = "create"

    args = [
        "az", "apim", "api", "operation", action,
        "--resource-group", RESOURCE_GROUP,
        "--service-name", SERVICE_NAME,
        "--api-id", API_ID,
        "--operation-id", op_id,
        "--display-name", display_name,
        "--method", method,
        "--url-template", path,
        "--description", "Auto-generated by pipeline"
    ]

    try:
        subprocess.run(args, check=True)
        print(f"‚úÖ Synced: {op_id}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to sync {op_id}: {e}")

def main():
    for file in sorted(os.listdir(SPLIT_DIR)):
        if file.endswith(".json"):
            sync_operation(file)

if __name__ == "__main__":
    main()
