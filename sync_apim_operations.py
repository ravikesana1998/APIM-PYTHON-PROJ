import os
import json
import subprocess

API_NAME = os.environ.get("APIM_API_NAME")
RESOURCE_GROUP = os.environ.get("APIM_RESOURCE_GROUP")
SERVICE_NAME = os.environ.get("APIM_SERVICE_NAME")

def create_or_update_operation(file_path):
    with open(file_path) as f:
        swagger = json.load(f)

    path = list(swagger["paths"].keys())[0]
    method = list(swagger["paths"][path].keys())[0]
    operation = swagger["paths"][path][method]

    operation_id = operation.get("operationId", f"{method.upper()}_{path.strip('/').replace('/', '_').replace('{','').replace('}','')}")
    display_name = operation.get("summary", operation_id)

    print(f"üì§ Syncing operation: {operation_id} ({method.upper()} {path})")

    try:
        subprocess.run([
            "az", "apim", "api", "operation", "create",
            "--resource-group", RESOURCE_GROUP,
            "--service-name", SERVICE_NAME,
            "--api-id", API_NAME,
            "--operation-id", operation_id,
            "--display-name", display_name,
            "--method", method.upper(),
            "--url-template", path,
            "--request-body-description", "Auto-generated by pipeline",
            "--responses", '[{"statusCode": "200"}]',
            "--yes"
        ], check=True)
        print(f"‚úÖ Synced operation: {operation_id}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to sync {operation_id}: {e}")

def main():
    split_dir = "split"
    if not os.path.isdir(split_dir):
        print("‚ùå Directory 'split/' not found.")
        return

    for filename in os.listdir(split_dir):
        if filename.endswith(".json"):
            file_path = os.path.join(split_dir, filename)
            create_or_update_operation(file_path)

if __name__ == "__main__":
    main()
